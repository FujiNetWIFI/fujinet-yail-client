# Sample linker configuration for C programs using the Atari binary file support.
# Use with: cl65 -tatari -Catari-xex.cfg prog.c -o prog.xex
FEATURES {
    STARTADDRESS: default = $2000;
}
SYMBOLS {
    #__SYSTEM_CHECK__:    type = import;  # force inclusion of "system check" load chunk
    __STACKSIZE__:       type = weak, value = $0800; # 2k stack
    __STARTADDRESS__:    type = export, value = %S;
    __RESERVED_MEMORY__: type = weak, value = $0000;
    #__SYSCHKHDR__:       type = export, value = 0; # Disable system check header
    #__SYSCHKTRL__:       type = export, value = 0; # Disable system check trailer
}
MEMORY {
    ZP:         file = "", define = yes, start = $0082, size = $007E;

# Preinitialization  1 - Disable BASIC
    PRE:        file = %O, define = no,  start = $2000, size = $0200; # init code that runs once and then overwritten (by SCREEN data etc)
    #PRE_NOSAV:  file = "", define = no,  start = $2200, size = $0100; # work aread for PRE-INIT routines that will be overwritten and not saved to disk

# "system check" load chunk
    #SYSCHKCHNK: file = %O,               start = $2E00, size = $0300;
# "main program" load chunk
    MAIN:       file = %O, define = yes, start = %S,    size = $BC20 - __STACKSIZE__ - __RESERVED_MEMORY__ - %S;
}
FILES {
    %O: format = atari;
}
FORMATS {
    atari: runad = start,
           initad = PRE: pre_init; #,
           #initad = SYSCHKCHNK: __SYSTEM_CHECK__;
}
SEGMENTS {
    ZEROPAGE:  load = ZP,         type = zp;
    EXTZP:     load = ZP,         type = zp,                optional = yes;
    INIT:     load = PRE,        type = ro,  define = yes;  # initialisation routines that will be overwritten
    #INIT_NS:  load = PRE_NOSAV,  type = rw,  define = yes;  # used as temporary bss-like data area for init routines but will be reused
    #SYSCHK:    load = SYSCHKCHNK, type = rw,  define = yes, optional = yes;
    STARTUP:   load = MAIN,       type = ro,  define = yes;
    LOWBSS:    load = MAIN,       type = rw,                optional = yes;  # not zero initialized
    LOWCODE:   load = MAIN,       type = ro,  define = yes, optional = yes;
    ONCE:      load = MAIN,       type = ro,                optional = yes;
    CODE:      load = MAIN,       type = ro,  define = yes;
    RODATA:    load = MAIN,       type = ro;
    DATA:      load = MAIN,       type = rw;
    #INIT:      load = MAIN,       type = rw,                optional = yes;
    BSS:       load = MAIN,       type = bss, define = yes;

    #GFX8_CONSOLE_DL: load = MAIN, type = rw,  align = $0100,  define = yes;
    #GFX9_CONSOLE_DL: load = MAIN, type = rw,  align = $0100,  define = yes;
    FRAMEBUFFER:     load = MAIN, type = rw,  align = $1000,  define = yes;
    GFX8_DL:         load = MAIN, type = rw,  align = $0400,  define = yes;
}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
